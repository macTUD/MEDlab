From: martijn <m.c.schaafsma@student.tudelft.nl>
Date: Tue, 25 Mar 2008 10:59:21 +0000 (+0100)
Subject: add some instrument plugins 2
X-Git-Tag: v0.1.0~374
X-Git-Url: http://qtwork.tudelft.nl/git/?p=qtlab;a=commitdiff_plain;h=6ae2f20157df3c7142b94f25e854951d078f083b

add some instrument plugins 2
---

diff --git a/instrument_plugins/AWG520.py b/instrument_plugins/AWG520.py
new file mode 100644
index 0000000..57d2461
--- /dev/null
+++ b/instrument_plugins/AWG520.py
@@ -0,0 +1,72 @@
+from instrument import Instrument
+import visa
+import types
+import logging
+import numpy
+import struct
+
+
+
+class AWG520(Instrument):
+    '''
+    todo:
+    trigger mode     AWGC:RMOD TRIG/CONT
+    trigger level    TRIG:LEV %.3f
+    trigger impedance     TRIG:IMP 1e3 / 50
+    waveform to file
+    send file
+    send waveform (needs to create file out of existing waveforms?) then call send file
+
+     think about:    clock, waveform length
+    '''
+
+    def __init__(self, name, address, reset=False):
+        Instrument.__init__(self, name)
+        
+        self._address = address        
+        self._visainstrument = visa.instrument(self._address)
+
+    def reset(self):
+        self._visainstrument.write('*RST')
+        
+    def send_waveform(self,w,m1,m2,filename,clock):
+        m = m1 + numpy.multiply(m2,2)
+        ws = ''
+        for i in range(0,len(w)):
+            ws = ws + struct.pack('<fB',w[i],m[i])
+        
+        s1 = 'MMEM:DATA "%s",' % filename
+        s3 = 'MAGIC 1000\n'
+        s5 = ws
+        s6 = 'CLOCK %.10e\n' % clock
+        
+        s4 = '#4' + str(len(s5))
+        s2 = '#4' + str(len(s6) + len(s5) + len(s4) + len(s3))
+            
+        mes = s1 + s2 + s3 + s4 + s5 + s6
+        
+        self._visainstrument.write(mes)
+        
+    def ch1_set_filename(self,name):
+        self._visainstrument.write('SOUR1:FUNC:USER "%s","MAIN"' % name)
+        
+    def ch1_set_amp(self,amp):
+        self._visainstrument.write('SOUR:VOLT:LEV:IMM:AMPL %.6f' % amp)
+        
+    def ch1_set_off(self,off):
+        self._visainstrument.write('SOUR:VOLT:LEV:IMM:OFFS %.6f' % off)
+        
+    def ch1_set_marker1_low(self,low):
+        self._visainstrument.write('SOUR:MARK1:VOLT:LEV:IMM:LOW %.3f' % low)
+        
+    def ch1_set_marker1_high(self,high):
+        self._visainstrument.write('SOUR:MARK1:VOLT:LEV:IMM:HIGH %.3f' % high)
+        
+    def ch1_set_marker2_low(self,low):
+        self._visainstrument.write('SOUR:MARK2:VOLT:LEV:IMM:LOW %.3f' % low)
+        
+    def ch1_set_marker2_high(self,high):
+        self._visainstrument.write('SOUR:MARK2:VOLT:LEV:IMM:HIGH %.3f' % high)
+        
+
+
diff --git a/instrument_plugins/HP81110A.py b/instrument_plugins/HP81110A.py
new file mode 100644
index 0000000..215aa5b
--- /dev/null
+++ b/instrument_plugins/HP81110A.py
@@ -0,0 +1,118 @@
+from instrument import Instrument
+import visa
+import types
+import logging
+
+class HP81110A(Instrument):
+    '''
+    This is the python driver for the HP 81110 A 
+    pulse generator
+    '''
+
+    def __init__(self, name, address, reset=False): #  address als derde parameter verwijderd!!
+        Instrument.__init__(self, name)
+
+        self._address = address        
+        self._visainstrument = visa.instrument(self._address)
+
+        self.add_parameter('delay', type=types.FloatType, flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET,
+            channels=(1,2), minval=0.0, maxval=999, units='sec')
+        self.add_parameter('width', type=types.FloatType, flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET,
+            channels=(1,2), minval=-6.25e-9, maxval=999.5, units='sec')
+        self.add_parameter('high', type=types.FloatType, flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET,
+            channels=(1,2), minval=-9.90, maxval=10.0, units='Volts')
+        self.add_parameter('low', type=types.FloatType, flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET,
+            channels=(1,2), minval=-10.0, maxval=9.90, units='Volts')
+        self.add_parameter('status', type=types.StringType,
+            channels=(1,2), flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET)
+        self.add_parameter('display', type=types.StringType,
+            flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET)
+            
+            
+        self.add_function('reset')
+        self.add_function('get_all')
+
+            
+        if reset:
+            self.reset()
+        else: 
+            self.get_all()
+           
+# initialization related
+
+    def reset(self):
+        '''
+        Reset device to default values
+        '''
+        
+        logging.debug(__name__ + ' : Resetting instrument')
+        self._visainstrument.write('*RST')
+        
+        #This updates all the variables in memory to the instrument values
+        self.get_all()
+
+    def get_all(self):
+        '''
+        Read settings from device
+        '''        
+        logging.debug(__name__ + ' : reading all settings from instrument')
+        # have to fix this
+
+# communication with machine
+
+    def _do_get_delay(self, channel):
+        return self._visainstrument.ask(':PULS:DEL' + str(channel) + "?")
+    
+    def _do_set_delay(self, val, channel):
+        self._visainstrument.write(':PULS:DEL' + str(channel) + " " + str(val) + "S")
+    
+    def _do_get_width(self, channel):
+        return self._visainstrument.ask(':PULS:WIDT' + str(channel) + "?")
+    
+    def _do_set_width(self, val, channel):
+        self._visainstrument.write(':PULS:WIDT' + str(channel) + " " + str(val) + "S")
+    
+    def _do_get_high(self, channel):
+        return self._visainstrument.ask(':VOLT' + str(channel) + ':HIGH?')
+
+    def _do_set_high(self, val, channel):
+        self._visainstrument.write(':VOLT' + str(channel) + ":HIGH " + str(val) + "V")
+    
+    def _do_get_low(self, channel):
+        return self._visainstrument.ask(':VOLT' + str(channel) + ':LOW?')
+    
+    def _do_set_low(self, val, channel):
+        self._visainstrument.write(':VOLT' + str(channel) + ":LOW " + str(val)        + "V")
+
+    
+    def _do_get_status(self, channel):
+        val = self._visainstrument.ask('OUTP' + str(channel) + '?')
+        if (val=='1'):
+            return 'on'
+        elif (val=='0'):
+            return 'off'
+        return 'error'    
+        
+    def _do_set_status(self, val, channel):
+        if ((val.upper()=='ON') | (val.upper()=='OFF')):
+            self._visainstrument.write('OUTP' + str(channel) + " " + val)
+        else:
+            logging.error('Try tot set OUTP to ' + str(val))    
+
+    
+    def _do_get_display(self):
+        val = self._visainstrument.ask('DISP?')
+        if (val=='1'):
+            return 'on'
+        elif (val=='0'):
+            return 'off'
+        return 'error'
+
+    
+    def _do_set_display(self, val):
+        if ((val.upper()=='ON') | (val.upper()=='OFF')):
+            self._visainstrument.write('DISP ' + val)
+        else:
+            logging.error('Try tot set display to ' +val)    
+    
+    
\ No newline at end of file
diff --git a/instrument_plugins/HP8657B.py b/instrument_plugins/HP8657B.py
new file mode 100644
index 0000000..507f523
--- /dev/null
+++ b/instrument_plugins/HP8657B.py
@@ -0,0 +1,103 @@
+from instrument import Instrument
+import visa
+import types
+import logging
+from time import sleep
+
+class HP8657B(Instrument):
+    '''
+    This is the python driver for the HP 8657B 
+    signal generator
+    
+    TODO:
+    1. Implement a reset that DOES work
+    2. Adjust timing
+    '''
+
+    def __init__(self, name, address, reset=False, freq=1e9, pow=-143.4): #  address als derde parameter verwijderd!!
+        Instrument.__init__(self, name)
+
+        self._address = address        
+        self._visainstrument = visa.instrument(self._address)
+        sleep(1)
+
+        self.add_parameter('frequency', type=types.FloatType, flags=Instrument.FLAG_SET,
+            minval=0.1e6, maxval=2060e6, units='Hz')
+        self.add_parameter('power', type=types.FloatType, flags=Instrument.FLAG_SET,
+            minval=-143.5, maxval=17, units='dBm')
+        self.add_parameter('status', type=types.StringType,
+            flags=Instrument.FLAG_SET)
+            
+        self.add_function('reset')            
+        self.add_function('set_all')
+
+            
+        if reset:
+            self.reset(freq,pow)
+        else:
+            self.set_all(freq,pow)
+
+           
+# initialization related
+
+    def reset(self, freq, pow):
+        '''
+        Reset device to default values, has to be ajusted jet
+        '''
+        
+        logging.debug(__name__ + ' : Resetting instrument')
+#        self._visainstrument.write('DC1')
+        self.set_all(100e6,-143.5)
+        
+        #This updates all the variables in memory to the instrument values
+    def set_all(self, freq, pow):
+        self.set_power(pow)
+        sleep(0.1)
+        self.set_frequency(freq)
+        sleep(0.1)
+
+ 
+
+# communication with machine
+
+
+    def _do_set_frequency(self, frequency):
+        '''
+        Set frequency of device
+        '''	
+        logging.debug(__name__ + ' : setting frequency to %s GHz' % frequency)
+        # sending value to instrument
+        self._visainstrument.write('FR%.0fHZ' % frequency)
+ 
+    def _do_set_power(self,power):
+        '''
+        Set output power of device
+        '''	
+        logging.debug(__name__ + ' : setting power to %s dBm' % power)
+        # sending value to instrument
+        self._visainstrument.write('AP%.1fDM' % power) 
+ 
+    def _do_set_status(self,status):
+        '''
+        Set status to 'on' or 'off'
+        '''	
+        if status.upper() == 'ON':
+            self._visainstrument.write('R3')
+        elif status.upper() == 'OFF':
+            self._visainstrument.write('R2')
+        else:
+            raise ValueError('set_status(): can only set on or off')
+        logging.debug(__name__ + ' : setting status to "%s"' % status)
+
+# shortcuts ?
+    def off(self):
+        '''
+        Set status to 'off'
+        '''
+        self.set_status('off')
+
+    def on(self):
+        '''
+        Set status to 'on'
+        '''
+        self.set_status('on')
diff --git a/instrument_plugins/RS_SMR40.py b/instrument_plugins/RS_SMR40.py
new file mode 100644
index 0000000..717b547
--- /dev/null
+++ b/instrument_plugins/RS_SMR40.py
@@ -0,0 +1,133 @@
+from instrument import Instrument
+import visa
+import types
+import logging
+
+class RS_SMR40(Instrument):
+    '''
+    This is the python driver for the Rohde & Schwarz SMR40 
+    signal generator
+    '''
+
+    def __init__(self, name, address, reset=False): #  address als derde parameter verwijderd!!
+        Instrument.__init__(self, name)
+
+        self._address = address        
+        self._visainstrument = visa.instrument(self._address)
+
+        self.add_parameter('frequency', type=types.FloatType, flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET,
+            minval=1e9, maxval=40e9, units='Hz')
+        self.add_parameter('power', type=types.FloatType, flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET,
+            minval=-30, maxval=25, units='dBm')
+        self.add_parameter('status', type=types.StringType,
+            flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET)
+            
+        self.add_function('reset')            
+        self.add_function('get_all')
+
+            
+        if reset:
+            self.reset()
+        else: 
+            self.get_all()
+           
+# initialization related
+
+    def reset(self):
+        '''
+        Reset device to default values
+        '''
+        
+        logging.debug(__name__ + ' : Resetting instrument')
+        self._visainstrument.write('*RST')
+        
+        #This updates all the variables in memory to the instrument values
+        self.get_all()
+
+    def get_all(self):
+        '''
+        Read settings from device
+        '''        
+        logging.debug(__name__ + ' : reading all settings from instrument')
+        self._frequency = self.get_frequency()
+        self._power = self.get_power()
+        self._status = self.get_status()
+
+# communication with machine
+
+    def _do_get_frequency(self):
+        '''
+        Get frequency from device
+        '''        
+        logging.debug(__name__ + ' : reading frequency from instrument')
+        # getting value from instrument to memory
+        self._frequency = float(self._visainstrument.ask('SOUR:FREQ?'))
+        return self._frequency
+
+    def _do_set_frequency(self, frequency):
+        '''
+        Set frequency of device
+        '''	
+        logging.debug(__name__ + ' : setting frequency to %s GHz' % frequency)
+        # sending value to instrument
+        self._visainstrument.write('SOUR:FREQ %e' % frequency)
+
+    def _do_get_power(self):
+        '''
+        Get output power from device
+        '''	
+        logging.debug(__name__ + ' : reading power from instrument')
+        # getting value from instrument to memory
+        self._power = float(self._visainstrument.ask('SOUR:POW?'))
+        return self._power
+
+    def _do_set_power(self,power):
+        '''
+        Set output power of device
+        '''	
+        logging.debug(__name__ + ' : setting power to %s dBm' % power)
+        # sending value to instrument
+        self._visainstrument.ask('SOUR:POW %e' % power) 
+
+    def _do_get_status(self):
+        '''
+        Get status from device
+        '''	
+        logging.debug(__name__ + ' : reading status from instrument')
+        # getting value from instrument to memory
+        cmd = self._visainstrument.ask(':OUTP:STAT?')
+        
+        if cmd == '1':
+            self._status = 'on'
+        elif cmd == '0':
+            self._status = 'off'
+        else:
+            self._status = 'error'
+            logging.debug(__name__ + ' : Unexpected Readout from get_status ')            
+        
+        return self._status
+ 
+    def _do_set_status(self,status):
+        '''
+        Set status to 'on' or 'off'
+        '''	
+        if status.upper() in ('ON', 'OFF'):
+            status = status.upper()
+        else:
+            raise ValueError('set_status(): can only set on or off')
+        logging.debug(__name__ + ' : setting status to "%s"' % status)
+        # sending value to instrument
+        self._visainstrument.write(':OUTP:STAT %s' % status) 
+
+# shortcuts ?
+    def off(self):
+        '''
+        Set status to 'off'
+        '''
+        self.set_status('off')
+
+    def on(self):
+        '''
+        Set status to 'on'
+        '''
+        self.set_status('on')
diff --git a/instrument_plugins/SMS.py b/instrument_plugins/SMS.py
new file mode 100644
index 0000000..4769e13
--- /dev/null
+++ b/instrument_plugins/SMS.py
@@ -0,0 +1,254 @@
+from instrument import Instrument
+import types
+import pyvisa.vpp43 as vpp43
+from time import sleep
+import logging
+import pickle
+
+class SMS(Instrument):
+    '''
+    TODO:
+    3) weten we zeker dat de bins kloppen?
+    4) hoe snel is het nu eigenlijk?
+    5) delays voor voorkomen collisions?
+    6) close serial?    
+    7) Deze faket een hard get met een file
+    8) Moet je een signaal kunnen sturen naar een apparaat dat uit staat?
+    9) Wat te doen wanneer er onterecht wordt gevraagd naar een file? Resetten?
+    10) Moet er bij inlezen data worden gecontroleerd of de dacpolarity nog klopt?
+    11) 'get pol dac' en 'set pol dac' updaten niet de wrapper voor andere drie dacs
+    '''
+
+    def __init__(self, name, address, reset=False, numdacs=8): #  
+        Instrument.__init__(self, name)
+    
+        # Set parameters
+        self._address = address
+        self.numdacs = numdacs
+        self.pol_num = range(self.numdacs)  
+        self._values = {}
+        self._filename = 'SMS_' + address + '.dat'
+                    
+        # Add functions
+        self.add_function('reset')
+        self.add_function('get_all')
+        self.add_function('MeasureADC_ON')
+        self.add_function('MeasureADC_OFF')
+        self.add_function('MeasureDAC_ON')
+        self.add_function('MeasureDAC_OFF')
+        self.add_function('SaveParameters')
+        self.add_function('LoadParameters')
+        
+        # Add parameters
+        self.add_parameter('dac', type=types.FloatType, flags=Instrument.FLAG_GETSET | Instrument.FLAG_GET_AFTER_SET,
+            channels=(1,self.numdacs), minval=0, maxval=0, units='Volts')
+        self.add_parameter('pol_dac', type=types.StringType, flags=Instrument.FLAG_GET,
+            channels=(1,self.numdacs))
+        self.add_parameter('BattVoltagePos', type=types.FloatType, flags=Instrument.FLAG_GET, units='Volts')
+        self.add_parameter('BattVoltageNeg', type=types.FloatType, flags=Instrument.FLAG_GET, units='Volts')
+             
+        self._open_serial_connection()
+
+        if reset:
+            self.reset()
+        else: 
+            self.get_all()
+    
+    # open serial connection
+    def _open_serial_connection(self): # check
+        logging.debug(__name__ + ' : opening connection')    
+        self._session = vpp43.open_default_resource_manager()
+        self._vi = vpp43.open(self._session,self._address)
+
+        vpp43.set_attribute(self._vi,vpp43.VI_ATTR_ASRL_BAUD, 19200)
+        vpp43.set_attribute(self._vi,vpp43.VI_ATTR_ASRL_DATA_BITS, 8)
+        vpp43.set_attribute(self._vi,vpp43.VI_ATTR_ASRL_STOP_BITS, vpp43.VI_ASRL_STOP_ONE)
+        vpp43.set_attribute(self._vi,vpp43.VI_ATTR_ASRL_PARITY, vpp43.VI_ASRL_PAR_EVEN)
+        
+    
+    # close serial connection
+    def _close_serial_connection(self): # check
+        logging.debug(__name__ + ' : closing connection')    
+        vpp43.close(self._vi)
+        
+    # Wrapper functions    
+    def reset(self, **kwargs): # check
+        logging.debug(__name__ + ' : resetting instrument')
+
+        for i in range(1,self.numdacs,4):
+            getattr(self, "get_pol_dac" + str(i))()
+        
+        print self._values
+
+        
+        for i in range(self.numdacs):       
+            getattr(self, 'set_dac' + str(i+1))(0)
+            
+    def get_all(self): # check      
+        # mist hier nog iets?? Dacpolarities opvragen??
+        logging.debug(__name__ + ' : get all data from memory')        
+
+        for i in range(1,1+self.numdacs/4):
+            getattr(self,'get_pol_dac' + str(4*i))()    
+
+        for i in range(self.numdacs):
+            getattr(self, 'get_dac' + str(i+1))()            
+
+    # functions
+    def MeasureADC_ON(self): # check
+        self._WriteToInstrument('PC1ADCON;')
+        logging.debug(__name__ + ' : Measure ADC set to ON')        
+        
+    def MeasureADC_OFF(self): # check
+        self._WriteToInstrument('PC1ADCOFF;')
+        logging.debug(__name__ + ' : Measore ADC set to OFF')        
+    
+    def MeasureDAC_ON(self): # check
+        self._WriteToInstrument('PC2DACON;')
+        logging.debug(__name__ + ' : Measure DAC set to ON')
+    
+    def MeasureDAC_OFF(self): # check
+        self._WriteToInstrument('PC2DACOFF;')
+        logging.debug(__name__ + ' : Measure DAC set to OFF')
+      
+    def SaveParameters(self):
+        self._save_values()
+        
+    def LoadParameters(self):
+        self._load_values()
+
+    # Communication with wrapper
+    def _do_get_dac(self, channel): # check
+        self._load_values()
+        logging.debug(__name__ + ' : reading and cpnverting to voltage from memory for dac%s' % channel)
+        byteval = self._ask_value('byteval_dac' + str(channel))
+        voltage = self._bytevalue_to_voltage(byteval) + self._ask_value('corr_dac' + str(channel))
+        return voltage            
+
+    def _do_set_dac(self, voltage, channel): #done
+        bytevalue = self._voltage_to_bytevalue(voltage - self._ask_value('corr_dac' + str(channel)))
+        numtekst = '00'
+        if (channel<10):
+            numtekst = '0' + str(channel)
+        elif (channel<100)&(channel>9):
+            numtekst = str(channel)
+        
+        # format string
+        bytestring = str(bytevalue)
+        while (len(bytestring)<5):
+            bytestring = '0' + bytestring
+        
+        self._WriteToInstrument('D' + numtekst + ',' + bytestring + ';')
+        self._store_value('byteval_dac' + str(channel), bytevalue)
+        logging.debug(__name__ + ' : setting voltage of dac%s to %s Volts' % (channel, voltage)) 
+        self._save_values()
+  
+
+    # Base functions to handle the polarity   
+    def _do_get_pol_dac(self, channel): # check
+        
+        # Also set bounds of dacs        
+        set = ((channel-1)/4)+1
+        
+        logging.debug(__name__ + ' : Reading polarity of dac ' + str(channel))
+        
+        self._WriteToInstrument('POLD' + str(set) + ';')
+        val = self._ReadBuffer()
+                
+        if (val == '-4V ... 0V'):
+            polarity = 'NEG'
+            correction = -4.0
+        elif (val == '-2V ... +2V'):
+            polarity = 'BIP'
+            correction = -2.0
+        elif (val == ' 0V ... +4V'):
+            polarity = 'POS'
+            correction = 0.0;
+        else:
+            print 'fout'
+            return 'Fout'
+            
+        for i in range(1+(set-1)*4,1+set*4):
+            self.set_parameter_bounds('dac' + str(i),correction,4.0+correction)
+            self._store_value('pol_dac' + str(i), polarity)
+            self._store_value('corr_dac' + str(i), correction)
+            
+        return polarity
+
+    def _do_get_BattVoltagePos(self): # check
+        self._WriteToInstrument('BCMAINPOS;')
+        tekst = self._ReadBuffer()
+        logging.debug(__name__ + ' : Reading Positive Battery voltage ' + str(tekst))
+        return tekst
+            
+    def _do_get_BattVoltageNeg(self): # check
+        self._WriteToInstrument('BCMAINNEG;')
+        tekst = self._ReadBuffer()
+        logging.debug(__name__ + ' : Reading Negative Battery voltage ' + str(tekst))
+        return tekst
+
+            
+    #  Retrieving data from buffer
+    def _ReadBuffer(self): # check
+        sleep(0.5)
+        tekst = vpp43.read(self._vi,vpp43.get_attribute(self._vi, vpp43.VI_ATTR_ASRL_AVAIL_NUM))
+        logging.debug(__name__ + ' : Reading buffer: ' + str(tekst))
+        
+        print 'Read from buffer : ' + tekst
+        
+        if (tekst==''):
+            return tekst        
+        elif (tekst[0]=='E'):
+            logging.error(__name__ + ' : An error occurred during readout of instrument : ' + tekst)
+        else: 
+            return tekst
+            
+    # Send data to instrument
+    def _WriteToInstrument(self, tekst): # check
+        # clear buffer
+        restbuffer = self._ReadBuffer()
+        logging.debug(__name__ + ' : Write tekst to instrument: ' + tekst)
+        if (restbuffer!=''):
+            logging.error(__name__ + ' : Buffer contained unread data : ' + restbuffer)
+        sleep(0.5)
+        vpp43.write(self._vi, tekst)
+        print 'String sent : ' + tekst
+        
+    # Keep track of data
+    def _store_value(self, name, val): # check
+        self._values[name] = val
+    
+    def _ask_value(self, name): # check
+        if name in self._values:
+            return self._values[name]
+        else:
+            logging.error(__name__ + " : Try to read non-existing parameter from memory : " + name)
+    
+    
+    def _load_values(self): # check
+        logging.debug(__name__ + ' : Unpickling data')
+    
+        try:
+            file = open(self._filename,'r')
+            self._values = pickle.load(file)    
+            file.close()
+            return True
+        except:
+            logging.debug(__name + " : Try to open nonexisting file")
+            return False
+    
+    def _save_values(self): # check
+        logging.debug(__name__ + ' : Pickling data')
+        file = open(self._filename,'w')
+        pickle.dump(self._values, file)    
+        file.close()    
+    
+    
+    # Conversion of data    
+    def _voltage_to_bytevalue(self, voltage): # check
+        bytevalue = int(round(voltage/4.0*65535))
+        return bytevalue
+
+    def _bytevalue_to_voltage(self, bytevalue): # check
+        value = 4.0*(bytevalue/65535.0)
+        return value
\ No newline at end of file